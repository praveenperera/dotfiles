#!/bin/bash

# exit on error
set -e

is_proxmox() {
  # Method 1: look for the pveversion command
  if command -v pveversion &>/dev/null; then
    return 0
  fi

  # Method 2: check for the /etc/pve directory (cluster config)
  if [[ -d /etc/pve ]]; then
    return 0
  fi

  # Method 3: see if the running kernel is a PVE kernel
  if uname -r | grep -qE 'pve-(kernel|enterprise)'; then
    return 0
  fi

  return 1
}

if is_proxmox; then
  echo "âœ… This is a Proxmox VE node."
  ./proxmox
fi

# Install nix
if [ ! -x "$(command -v nix-env)" ] && [ $(uname) != "Darwin" ]; then
    curl -L https://nixos.org/nix/install | sh -s -- --daemon
    . "$HOME/.nix-profile/etc/profile.d/nix.sh" || . /etc/profile.d/nix.sh
    systemctl enable nix-daemon.socket
    systemctl start nix-daemon.socket
fi

# unset RUSTC_WRAPPER if sccache is not installed
if [ ! -x "$(command -v sccache)" ]; then
    unset RUSTC_WRAPPER
fi

if [ ! -x "$(command -v cc)" ]; then
    echo "Installing gcc..."
    apt install gcc -y || sudo apt-get install gcc -y || apt-get install gcc -y || sudo apt-get install gcc -y
fi

# Install Rust
if [ ! -x "$(command -v cargo)" ]; then
    echo "Installing Rust..."
    echo "HOME is $HOME"

    export CARGO_HOME=$HOME/.cargo
    export RUSTUP_HOME=$HOME/.rustup
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o rustup-init.sh
    sh rustup-init.sh -y --no-modify-path --default-toolchain stable
    rm rustup-init.sh
    . "$HOME/.cargo/env"
fi

cd cmd
mkdir -p secrets
./release

if [[ "$1" == "minimal" ]]; then
  echo "Installing minimal packages..."
elif [[ "$1" == "full" ]]; then
  echo "Installing full packages..."
else
  echo "Must specify either minimal or full"
  exit 1
fi

$HOME/.local/bin/cmd bootstrap "$1"
gpgconf --kill gpg-agent ||
gpgconf --launch gpg-agent || true

# if macos, and full install, change shell to zsh
if [[ "$1" == "full" ]] && [ $(uname) == "Darwin" ]; then
  sudo chsh $(whoami) --shell $(which zsh) || echo "Could not change shell"
fi

exec zsh
