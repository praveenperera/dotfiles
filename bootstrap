#!/bin/bash

# exit on error
set -e

# functions
is_proxmox() {
  # Method 1: look for the pveversion command
  if command -v pveversion &>/dev/null; then
    return 0
  fi

  # Method 2: check for the /etc/pve directory (cluster config)
  if [[ -d /etc/pve ]]; then
    return 0
  fi

  # Method 3: see if the running kernel is a PVE kernel
  if uname -r | grep -qE 'pve-(kernel|enterprise)'; then
    return 0
  fi

  return 1
}

if [[ "$1" == "minimal" ]]; then
  echo "Installing minimal packages..."
elif [[ "$1" == "full" ]]; then
  echo "Installing full packages..."
else
  echo "Must specify either minimal or full"
  exit 1
fi


if is_proxmox; then
  echo "âœ… This is a Proxmox VE node."
  ./proxmox
fi


# make sure we have sudo and gpg on linux and install docker
if [ $(uname) != "Darwin" ]; then
command -v sudo || which sudo || apt install sudo -y

# install docker
export DEBIAN_FRONTEND=noninteractive
apt update -y && apt install -y ca-certificates curl gnupg lsb-release
mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
apt update -y && apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
docker --version
fi

# Install nix
if [ ! -x "$(command -v nix-env)" ] && [ $(uname) != "Darwin" ]  && [[ "$1" != "minimal" ]]; then
    which sudo || apt install sudo -y || sudo apt-get install sudo -y || sudo apt-get install sudo -y

    curl -L https://nixos.org/nix/install | sh -s -- --daemon
    . "$HOME/.nix-profile/etc/profile.d/nix.sh" || . /etc/profile.d/nix.sh
    systemctl enable nix-daemon.socket
    systemctl start nix-daemon.socket
fi

# unset RUSTC_WRAPPER if sccache is not installed
if [ ! -x "$(command -v sccache)" ]; then
    unset RUSTC_WRAPPER
fi

# only install gcc for full mode
if [[ "$1" == "full" ]] && [ ! -x "$(command -v cc)" ]; then
    echo "Installing gcc..."
    apt install gcc -y || sudo apt-get install gcc -y || apt-get install gcc -y || sudo apt-get install gcc -y
fi

# only install rust for full mode or if cmd binary doesn't exist
if [[ "$1" == "full" ]] && [ ! -x "$HOME/.local/bin/cmd" ]; then
    if [ ! -x "$(command -v cargo)" ]; then
        echo "Installing Rust..."
        echo "HOME is $HOME"

        export CARGO_HOME=$HOME/.cargo
        export RUSTUP_HOME=$HOME/.rustup
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o rustup-init.sh
        sh rustup-init.sh -y --no-modify-path --default-toolchain stable
        rm rustup-init.sh
        . "$HOME/.cargo/env"
    fi
fi

cd cmd
mkdir -p secrets

if [[ "$1" == "full" ]]; then
  ./release
else
  ./release-minimal
fi

# install eza manually on minimal install
if [[ "$1" == "minimal" ]] && [ ! -x "$(command -v eza)" ]; then
    echo "Installing eza..."
    sudo mkdir -p /etc/apt/keyrings
    wget -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | sudo gpg --dearmor -o /etc/apt/keyrings/gierens.gpg
    echo "deb [signed-by=/etc/apt/keyrings/gierens.gpg] http://deb.gierens.de stable main" | sudo tee /etc/apt/sources.list.d/gierens.list
    sudo chmod 644 /etc/apt/keyrings/gierens.gpg /etc/apt/sources.list.d/gierens.list
    sudo apt update
    sudo apt install -y eza
fi

$HOME/.local/bin/cmd bootstrap "$1"
gpgconf --kill gpg-agent ||
gpgconf --launch gpg-agent || true

# if macos, and full install, change shell to zsh
if [[ "$1" == "full" ]] && [ $(uname) == "Darwin" ]; then
  sudo chsh $(whoami) --shell $(which zsh) || echo "Could not change shell"
else
  chsh $(whoami) --shell $(which zsh) || echo "Could not change shell"
fi

exec zsh
