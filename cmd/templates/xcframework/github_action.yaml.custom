name: Build, Tag and Create Release
permissions:
  contents: write
on:
  workflow_dispatch:
    inputs:
      version:
        description: "New release version, eg. 0.MINOR.PATCH"
        required: true
        type: string
      ffitag:
        description: "The [% package_name %] tag to use for the release"
        required: true
        type: string

jobs:
  build-publish:
    name: Build, tag and create release
    runs-on: macos-12
    steps:
      - name: "Checkout build repo"
        uses: actions/checkout@v3
        with:
          repository: "${{ github.repository_owner }}/[% package_name %]"
          path: build
          ref: "${{ inputs.ffitag }}"

      - name: "Checkout dist repo"
        uses: actions/checkout@v3
        with:
          path: dist

      - name: "Install Rust targets"
        working-directory: build/[% package_name %]
        run: |
          rustup default [% rust_version %] 
          rustup component add rust-src
          rustup target add aarch64-apple-ios      # iOS ARM64
          rustup target add x86_64-apple-ios       # iOS x86_64
          rustup target add aarch64-apple-ios-sim  # simulator mac M1
          rustup target add aarch64-apple-darwin   # mac M1
          rustup target add x86_64-apple-darwin    # mac x86_64

      - name: "Build [% package_name %] for all targets"
        working-directory: build/[% package_name %]
        run: |
          cargo build --profile release-smaller --target x86_64-apple-darwin
          cargo build --profile release-smaller --target aarch64-apple-darwin
          cargo build --profile release-smaller --target x86_64-apple-ios
          cargo build --profile release-smaller --target aarch64-apple-ios
          cargo build --profile release-smaller --target aarch64-apple-ios-sim

      - name: "Run uniffi-bindgen for [% package_name %]"
        working-directory: build/[% package_name %]
        run: |
          cargo run --bin uniffi-bindgen generate --library ./target/aarch64-apple-ios/release-smaller/lib[% name %].dylib --language swift --out-dir ../[% base_name %]-swift/Sources/[% module_name %]

      - name: "Create lipo-ios-sim and lipo-macos"
        working-directory: build/[% package_name %]
        run: |
          mkdir -p target/lipo-ios-sim/release-smaller
          lipo target/aarch64-apple-ios-sim/release-smaller/lib[% name %].a target/x86_64-apple-ios/release-smaller/lib[% name %].a -create -output target/lipo-ios-sim/release-smaller/lib[% name %].a

          mkdir -p target/lipo-macos/release-smaller
          lipo target/aarch64-apple-darwin/release-smaller/lib[% name %].a target/x86_64-apple-darwin/release-smaller/lib[% name %].a -create -output target/lipo-macos/release-smaller/lib[% name %].a

      - name: "Create [% module_name %].xcframework"
        working-directory: build/[% base_name %]-swift
        run: |
          mv Sources/[% module_name %]/[% name %].swift Sources/[% module_name %]/[% module_name %].swift

          cp Sources/[% module_name %]/[% name %]FFI.h [% module_name %].xcframework/ios-arm64/[% name %]FFI.framework/Headers
          cp Sources/[% module_name %]/[% name %]FFI.h [% module_name %].xcframework/ios-arm64_x86_64-simulator/[% name %]FFI.framework/Headers
          cp Sources/[% module_name %]/[% name %]FFI.h [% module_name %].xcframework/macos-arm64_x86_64/[% name %]FFI.framework/Headers

          cp ../[% package_name %]/target/aarch64-apple-ios/release-smaller/lib[% name %].a [% module_name %].xcframework/ios-arm64/[% name %]FFI.framework/[% name %]FFI
          cp ../[% package_name %]/target/lipo-ios-sim/release-smaller/lib[% name %].a [% module_name %].xcframework/ios-arm64_x86_64-simulator/[% name %]FFI.framework/[% name %]FFI
          cp ../[% package_name %]/target/lipo-macos/release-smaller/lib[% name %].a [% module_name %].xcframework/macos-arm64_x86_64/[% name %]FFI.framework/[% name %]FFI

          rm Sources/[% module_name %]/[% name %]FFI.h
          rm Sources/[% module_name %]/[% name %]FFI.modulemap

          rm [% module_name %].xcframework.zip || true
          zip -9 -r [% module_name %].xcframework.zip [% module_name %].xcframework
          echo "FFI_CHECKSUM=`swift package compute-checksum [% module_name %].xcframework.zip`" >> $GITHUB_ENV
          echo "FFI_URL=https\:\/\/github\.com\/${{ github.repository_owner }}\/[% base_name %]\-swift\/releases\/download\/${{ inputs.version }}\/[% module_name %]\.xcframework\.zip" >> $GITHUB_ENV

      - name: "Update and tag release dist repo"
        working-directory: build/[% base_name %]-swift
        run: |
          echo checksum = ${{ env.FFI_CHECKSUM }}
          echo url = ${{ env.FFI_URL }}
          sed "s/FFI_CHECKSUM/${FFI_CHECKSUM}/;s/FFI_URL/${FFI_URL}/" Package.swift.txt > ../../dist/Package.swift
          cp Sources/[% module_name %]/[% module_name %].swift ../../dist/Sources/[% module_name %]/[% module_name %].swift
          cd ../../dist
          git add Sources/[% module_name %]/[% module_name %].swift
          git add Package.swift
          git commit -m "Update [% module_name %].swift and Package.swift for release ${{ inputs.version }}"
          git push
          git tag ${{ inputs.version }} -m "Release ${{ inputs.version }}"
          git push --tags

      - name: "Create release"
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/[% base_name %]-swift/[% module_name %].xcframework.zip"
          tag: ${{ inputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ inputs.version }}
          prerelease: true
