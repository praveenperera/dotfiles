use std::sync::Arc;

use crossbeam::channel::{Receiver, Sender};
use parking_lot::Mutex;

use cove_macros::{impl_default_for, impl_message_manager;
use crate::manager::{
    deferred_sender::{self, MessageManager},
    wallet::{RustWalletManager, actor::WalletActor},
};

type Message = {{ module_name }}ManagerReconcileMessage;
type Action = {{ module_name }}ManagerAction;
type State = {{ module_name }}ManagerState;
type Reconciler = dyn {{ module_name }}ManagerReconciler;
type SingleOrMany = deferred_sender::SingleOrMany<Message>;
type DeferredSender = deferred_sender::DeferredSender<Arc<Rust{{ manager_name }}>, Message>;

#[derive(Debug, Copy, Clone, Hash, Eq, PartialEq, uniffi::Enum)]
pub enum {{ module_name }}ManagerReconcileMessage {
    NoOp
}

#[uniffi::export(callback_interface)]
pub trait {{ module_name }}ManagerReconciler: Send + Sync + std::fmt::Debug + 'static {
    /// Tells the frontend to reconcile the manager changes
    fn reconcile(&self, message: Message);
    fn reconcile_many(&self, message: Vec<Message>);
}

#[derive(Clone, Debug, uniffi::Object)]
pub struct Rust{{ module_name }}Manager {
    pub state: Arc<Mutex<{{ module_name }}ManagerState>>,
    pub reconciler: Sender<Message>,
    pub reconcile_receiver: Arc<Receiver<Message>>,
}

#[derive(Clone, Debug, uniffi::Record)]
pub struct {{ module_name }}ManagerState { }

#[derive(Debug, Copy, Clone, Hash, Eq, PartialEq, uniffi::Enum)]
pub enum {{ module_name }}ManagerAction {
    NoOp,
}

impl_default_for!(Rust{{ module_name }}Manager);
#[uniffi::export]
impl Rust{{ manager_name }} {
    #[uniffi::constructor]
    pub fn new() -> Self {
        let (sender, receiver) = crossbeam::channel::bounded(1000);

        Self {
            state: Arc::new(Mutex::new({{ module_name }}ManagerState::new())),
            reconciler: sender,
            reconcile_receiver: Arc::new(receiver),
        }
    }

    #[uniffi::method]
    pub fn listen_for_updates(&self, reconciler: Box<Reconciler>) {
        let reconcile_receiver = self.reconcile_receiver.clone();

        task::spawn(async move {
            while let Ok(field) = reconcile_receiver.recv_async().await {
                trace!("reconcile_receiver: {field:?}");
                match field {
                    SingleOrMany::Single(message) => reconciler.reconcile(message),
                    SingleOrMany::Many(messages) => reconciler.reconcile_many(messages),
                }
            }
        });
    }

    /// Action from the frontend to change the state of the view model
    #[uniffi::method]
    pub fn dispatch(&self, action: Action) {
        match action {
            {{ module_name }}ManagerAction::NoOp => {}
        }
    }
}

impl Rust{{ manager_name }} {
    fn send(self: &Arc<Self>, message: impl Into<SingleOrMany>) {
        let message = message.into();
        debug!("send: {message:?}");
        match self.reconciler.try_send(message.clone()) {
            Ok(_) => {}
            Err(TrySendError::Full(err)) => {
                warn!("[WARN] unable to send, queue is full: {err:?}, sending async");

                let me = self.clone();
                task::spawn(async move { me.send_async(message).await });
            }
            Err(e) => {
                error!("unable to send message to send flow manager: {e:?}");
            }
        }
    }
}


impl_default_for!(State);
impl State {
    pub fn new() -> Self {
        Self {}
    }
}

impl MessageManager<Message> for Arc<Rust{{manager_name}}> {
    fn send(&self, msgs: SingleOrMany) {
        self.send(msgs);
    }
}
