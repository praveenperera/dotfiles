use std::sync::Arc;

use parking_lot::Mutex;

use crate::manager::deferred_sender;
use crate::task;
use cove_macros::{impl_default_for, impl_manager_message_send};
use flume::{Receiver, Sender, TrySendError};
use tracing::{debug, error, trace, warn};

type Message = {{manager_name}}ReconcileMessage;
type Action = {{manager_name}}Action;
type State = {{manager_name}}State;
type Reconciler = dyn {{manager_name}}Reconciler;
type SingleOrMany = deferred_sender::SingleOrMany<Message>;
type DeferredSender = deferred_sender::DeferredSender<Arc<Rust{{ manager_name }}>, Message>;
impl_manager_message_send!(Rust{{manager_name}});

#[derive(Debug, Copy, Clone, Hash, Eq, PartialEq, uniffi::Enum)]
pub enum {{manager_name}}ReconcileMessage {
    NoOp
}

#[uniffi::export(callback_interface)]
pub trait {{manager_name}}Reconciler: Send + Sync + std::fmt::Debug + 'static {
    /// Tells the frontend to reconcile the manager changes
    fn reconcile(&self, message: Message);
    fn reconcile_many(&self, messages: Vec<Message>);
}

#[derive(Clone, Debug, uniffi::Object)]
pub struct Rust{{manager_name}} {
    pub state: Arc<Mutex<{{manager_name}}State>>,
    pub reconciler: Sender<SingleOrMany>,
    pub reconcile_receiver: Arc<Receiver<SingleOrMany>>,
}

#[derive(Clone, Debug, uniffi::Object)]
pub struct {{manager_name}}State {}

#[derive(Debug, Copy, Clone, Hash, Eq, PartialEq, uniffi::Enum)]
pub enum {{manager_name}}Action {
    NoOp,
}

impl_default_for!(Rust{{manager_name}});
#[uniffi::export]
impl Rust{{ manager_name }} {
    #[uniffi::constructor]
    pub fn new() -> Self {
        let (sender, receiver) = flume::bounded(10);

        Self {
            state: Arc::new(Mutex::new({{manager_name}}State::new())),
            reconciler: sender,
            reconcile_receiver: Arc::new(receiver),
        }
    }

    #[uniffi::method]
    pub fn listen_for_updates(&self, reconciler: Box<Reconciler>) {
        let reconcile_receiver = self.reconcile_receiver.clone();

        task::spawn(async move {
            while let Ok(field) = reconcile_receiver.recv_async().await {
                trace!("reconcile_receiver: {field:?}");
                match field {
                    SingleOrMany::Single(message) => reconciler.reconcile(message),
                    SingleOrMany::Many(messages) => reconciler.reconcile_many(messages),
                }
            }
        });
    }

    /// Action from the frontend to change the state of the view model
    #[uniffi::method]
    pub fn dispatch(&self, action: Action) {
        match action {
            {{manager_name}}Action::NoOp => {}
        }
    }
}

impl Rust{{ manager_name }} {
    fn send(self: &Arc<Self>, message: impl Into<SingleOrMany>) {
        let message = message.into();
        debug!("send: {message:?}");
        match self.reconciler.try_send(message.clone()) {
            Ok(_) => {}
            Err(TrySendError::Full(err)) => {
                warn!("[WARN] unable to send, queue is full: {err:?}, sending async");

                let me = self.clone();
                task::spawn(async move { me.send_async(message).await });
            }
            Err(e) => {
                error!("unable to send message to send flow manager: {e:?}");
            }
        }
    }

    async fn send_async(self: &Arc<Self>, message: impl Into<SingleOrMany>) {
        let message = message.into();
        debug!("send_async: {message:?}");
        if let Err(err) = self.reconciler.send_async(message).await {
            error!("unable to send message to send flow manager: {err}");
        }
    }
}


impl_default_for!(State);
impl State {
    pub fn new() -> Self {
        Self {}
    }
}

