import SwiftUI

extension WeakReconciler: {{ manager_name }}Reconciler where Reconciler == {{ manager_name }} {}

@Observable final class {{ manager_name }}: AnyReconciler, {{ manager_name }}Reconciler {
    typealias Message = {{manager_name }}ReconcileMessage
    typealias Action = {{manager_name }}Action

    private let logger = Log(id: "{{ manager_name }}")
    var rust: Rust{{ manager_name }}

    public init() {
        self.rust = Rust{{ manager_name }}()
        self.rust.listenForUpdates(reconciler: WeakReconciler(self))
    }

    private func apply(_ message: Message) {
        switch message {
        case .noOp: ()
        }
    }

    internal func reconcile(message: Message) {
        rustBridge.async { [weak self] in
            guard let self else {
                Log.error("{{ manager_name }} no longer available")
                return
            }

            logger.debug("reconcile: \(message)")
            DispatchQueue.main.async { [self] in
                self.apply(message)
            }
        }
    }
    
    internal func reconcileMany(messages: [Message]) {
        rustBridge.async { [weak self] in
            guard let self else {
                Log.error("{{ manager_name }} no longer available")
                return
            }

            logger.debug("reconcile_messages: \(messages)")
            DispatchQueue.main.async { [self] in
                for message in messages {
                    self.apply(message)
                }
            }
        }
    }

    public func dispatch(action: Action) { dispatch(action) }
    public func dispatch(_ action: Action) {
        rustBridge.async {
            self.logger.debug("dispatch: \(action)")
            self.rust.dispatch(action: action)
        }
    }
}
