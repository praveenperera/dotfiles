import SwiftUI

extension WeakReconciler: {{ manager_name }}Reconciler where Reconciler == {{ manager_name }} {}

@Observable final class {{ manager_name }}: AnyReconciler, {{ manager_name }}Reconciler {
    private let logger = Log(id: "{{ manager_name }}")
    var rust: Rust{{ manager_name }}

    public init() {
        self.rust = Rust{{ manager_name }}()
        self.rust.listenForUpdates(reconciler: WeakReconciler(self))
    }

    func reconcile(message: {{ manager_name }}ReconcileMessage) {
        Task { [weak self] in
            guard let self else {
                Log.error("{{ manager_name }} no longer available")
                return
            }

            let rust = rust
            logger.debug("reconcile: \(message)")

            await MainActor.run {
                switch message {
                case .noOp:
                  break 
                }
            }
        }
    }

    private let dispatchQueue = DispatchQueue(label: "cove.{{ lowercased(manager_name) }}.dispatch", qos: .userInitiated)
    public func dispatch(action: {{manager_name}}Action) { dispatch(action) }
    public func dispatch(_ action: {{ manager_name }}Action) {
        dispatchQueue.async {
            logger.debug("dispatch: \(action)")
            self.rust.dispatch(action: action)
        }
    }
}
