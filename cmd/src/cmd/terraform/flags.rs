xflags::xflags! {
    src "./src/cmd/terraform/flags.rs"

    cmd terraform {
        /// Initialize terraform state
        cmd init {
            repeated args: String
        }

        /// Encrypt terraform state file
        cmd encrypt enc {
            optional file: String
        }

        /// Decrypt terraform state file
        cmd decrypt dec {
            optional file: String
        }

        /// Run terraform command
        default cmd run {
            required command: String
            repeated args: String
        }
    }
}

// generated start
// The following code is generated by `xflags` macro.
// Run `env UPDATE_XFLAGS=1 cargo build` to regenerate.
#[derive(Debug)]
pub struct Terraform {
    pub subcommand: TerraformCmd,
}

#[derive(Debug)]
pub enum TerraformCmd {
    Run(Run),
    Init(Init),
    Encrypt(Encrypt),
    Decrypt(Decrypt),
}

#[derive(Debug)]
pub struct Run {
    pub command: String,
    pub args: Vec<String>,
}

#[derive(Debug)]
pub struct Init {
    pub args: Vec<String>,
}

#[derive(Debug)]
pub struct Encrypt {
    pub file: Option<String>,
}

#[derive(Debug)]
pub struct Decrypt {
    pub file: Option<String>,
}

impl Terraform {
    #[allow(dead_code)]
    pub fn from_env_or_exit() -> Self {
        Self::from_env_or_exit_()
    }

    #[allow(dead_code)]
    pub fn from_env() -> xflags::Result<Self> {
        Self::from_env_()
    }

    #[allow(dead_code)]
    pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {
        Self::from_vec_(args)
    }
}
// generated end

impl Terraform {
    pub fn help() -> &'static str {
        Self::HELP_
    }
}