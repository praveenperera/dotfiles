use super::BootstrapMode;

xflags::xflags! {
    src "./src/cmd/bootstrap/flags.rs"

    cmd bootstrap {
        /// Bootstrap mode: 'minimal' or 'full'
        required mode: BootstrapMode
    }
}
// generated start
// The following code is generated by `xflags` macro.
// Run `env UPDATE_XFLAGS=1 cargo build` to regenerate.
#[derive(Debug)]
pub struct Bootstrap {
    pub mode: BootstrapMode,
}

impl Bootstrap {
    #[allow(dead_code)]
    pub fn from_env_or_exit() -> Self {
        Self::from_env_or_exit_()
    }

    #[allow(dead_code)]
    pub fn from_env() -> xflags::Result<Self> {
        Self::from_env_()
    }

    #[allow(dead_code)]
    pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {
        Self::from_vec_(args)
    }
}
// generated end
//
impl Bootstrap {
    pub fn help() -> &'static str {
        Self::HELP_
    }

    pub fn help_(&self) -> &'static str {
        Self::HELP_
    }

    pub fn from_args(args: &[std::ffi::OsString]) -> eyre::Result<Self> {
        crate::util::handle_xflags_error(Self::from_vec(args.to_vec()), args, Self::help())
    }
}
