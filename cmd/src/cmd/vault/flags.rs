xflags::xflags! {
    src "./src/cmd/vault/flags.rs"

    cmd vault {
        /// Encrypt file
        cmd encrypt enc {
            required file: String
        }

        /// Decrypt file
        cmd decrypt dec {
            required file: String
        }
    }
}

// generated start
// The following code is generated by `xflags` macro.
// Run `env UPDATE_XFLAGS=1 cargo build` to regenerate.
#[derive(Debug)]
pub struct Vault {
    pub subcommand: VaultCmd,
}

#[derive(Debug)]
pub enum VaultCmd {
    Encrypt(Encrypt),
    Decrypt(Decrypt),
}

#[derive(Debug)]
pub struct Encrypt {
    pub file: String,
}

#[derive(Debug)]
pub struct Decrypt {
    pub file: String,
}

impl Vault {
    #[allow(dead_code)]
    pub fn from_env_or_exit() -> Self {
        Self::from_env_or_exit_()
    }

    #[allow(dead_code)]
    pub fn from_env() -> xflags::Result<Self> {
        Self::from_env_()
    }

    #[allow(dead_code)]
    pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {
        Self::from_vec_(args)
    }
}
// generated end

impl Vault {
    pub fn help() -> &'static str {
        Self::HELP_
    }

    pub fn from_args(args: &[std::ffi::OsString]) -> eyre::Result<Self> {
        crate::util::handle_xflags_error(Vault::from_vec(args.to_vec()), args, Vault::help())
    }
}