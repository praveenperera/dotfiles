xflags::xflags! {
    src "./src/cmd/flags.rs"

    cmd cmd {
        /// Print version information
        optional --version

        /// Bootstrap dotfiles
        cmd bootstrap {
            repeated args: String
        }

        /// Release/update cmd binary
        cmd release {
            repeated args: String
        }

        /// Configure dotfiles (alias: cfg)
        cmd config cfg {
            repeated args: String
        }

        /// Google Cloud login (alias: gl)
        cmd gcloud-login gl {
            repeated args: String
        }

        /// Google Cloud switch project (alias: gsp)
        cmd gcloud-switch-project gsp {
            repeated args: String
        }

        /// Google Cloud switch cluster (alias: gsc)
        cmd gcloud-switch-cluster gsc {
            repeated args: String
        }

        /// Generate secret (aliases: secret-generate, sgen)
        cmd secret-gen secret-generate sgen {
            repeated args: String
        }

        /// Get secret (alias: sg)
        cmd secret-get sg {
            repeated args: String
        }

        /// Save secret (alias: ss)
        cmd secret-save ss {
            repeated args: String
        }

        /// Update secret (alias: su)
        cmd secret-update su {
            repeated args: String
        }

        /// Terraform (alias: tf)
        cmd terraform tf {
            repeated args: String
        }

        /// Vault operations
        cmd vault {
            repeated args: String
        }

        /// Generate code/files (alias: gen)
        cmd generate gen {
            repeated args: String
        }
    }
}

// generated start
// The following code is generated by `xflags` macro.
// Run `env UPDATE_XFLAGS=1 cargo build` to regenerate.
#[derive(Debug)]
pub struct Cmd {
    pub version: bool,
    pub subcommand: CmdCmd,
}

#[derive(Debug)]
pub enum CmdCmd {
    Bootstrap(Bootstrap),
    Release(Release),
    Config(Config),
    GcloudLogin(GcloudLogin),
    GcloudSwitchProject(GcloudSwitchProject),
    GcloudSwitchCluster(GcloudSwitchCluster),
    SecretGen(SecretGen),
    SecretGet(SecretGet),
    SecretSave(SecretSave),
    SecretUpdate(SecretUpdate),
    Terraform(Terraform),
    Vault(Vault),
    Generate(Generate),
}

#[derive(Debug)]
pub struct Bootstrap {
    pub args: Vec<String>,
}

#[derive(Debug)]
pub struct Release {
    pub args: Vec<String>,
}

#[derive(Debug)]
pub struct Config {
    pub args: Vec<String>,
}

#[derive(Debug)]
pub struct GcloudLogin {
    pub args: Vec<String>,
}

#[derive(Debug)]
pub struct GcloudSwitchProject {
    pub args: Vec<String>,
}

#[derive(Debug)]
pub struct GcloudSwitchCluster {
    pub args: Vec<String>,
}

#[derive(Debug)]
pub struct SecretGen {
    pub args: Vec<String>,
}

#[derive(Debug)]
pub struct SecretGet {
    pub args: Vec<String>,
}

#[derive(Debug)]
pub struct SecretSave {
    pub args: Vec<String>,
}

#[derive(Debug)]
pub struct SecretUpdate {
    pub args: Vec<String>,
}

#[derive(Debug)]
pub struct Terraform {
    pub args: Vec<String>,
}

#[derive(Debug)]
pub struct Vault {
    pub args: Vec<String>,
}

#[derive(Debug)]
pub struct Generate {
    pub args: Vec<String>,
}

impl Cmd {
    #[allow(dead_code)]
    pub fn from_env_or_exit() -> Self {
        Self::from_env_or_exit_()
    }

    #[allow(dead_code)]
    pub fn from_env() -> xflags::Result<Self> {
        Self::from_env_()
    }

    #[allow(dead_code)]
    pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {
        Self::from_vec_(args)
    }
}
// generated end

impl Cmd {
    pub fn help() -> &'static str {
        Cmd::HELP_
    }
}