xflags::xflags! {
    src "./src/cmd/generate/flags.rs"

    cmd generate gen {
        /// Rust multi platform
        cmd rmp {
            /// either `swift` or `rs`
            required lang: String

            /// name of the module name ex: `MyModule`
            required module_name: String

            /// the name of the app, default to `cove`
            optional -a, --app app: String
        }

        /// Swift related generators
        cmd swift {
            required name: String
            required identifier: String
            optional path: String
            repeated rest: String
        }

        /// Swift Colors
        cmd SwiftColor swift_color {
            required name: String
            required light_hex: String
            optional dark_hex: String
        }

        default cmd help {}
    }
}

impl Generate {
    pub const HELP: &'static str = Self::HELP_;
}

// generated start
// The following code is generated by `xflags` macro.
// Run `env UPDATE_XFLAGS=1 cargo build` to regenerate.
#[derive(Debug)]
pub struct Generate {
    pub subcommand: GenerateCmd,
}

#[derive(Debug)]
pub enum GenerateCmd {
    Help(Help),
    Rmp(Rmp),
    Swift(Swift),
    SwiftColor(SwiftColor),
}

#[derive(Debug)]
pub struct Help;

#[derive(Debug)]
pub struct Rmp {
    pub lang: String,
    pub module_name: String,

    pub app: Option<String>,
}

#[derive(Debug)]
pub struct Swift {
    pub name: String,
    pub identifier: String,
    pub path: Option<String>,
    pub rest: Vec<String>,
}

#[derive(Debug)]
pub struct SwiftColor {
    pub name: String,
    pub light_hex: String,
    pub dark_hex: Option<String>,
}

impl Generate {
    #[allow(dead_code)]
    pub fn from_env_or_exit() -> Self {
        Self::from_env_or_exit_()
    }

    #[allow(dead_code)]
    pub fn from_env() -> xflags::Result<Self> {
        Self::from_env_()
    }

    #[allow(dead_code)]
    pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {
        Self::from_vec_(args)
    }
}
// generated end
//
impl Generate {
    pub fn help() -> &'static str {
        Generate::HELP_
    }
}
