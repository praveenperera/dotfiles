name: release-cmd

on:
  push:
    branches: [master]
    paths:
      - "cmd/**"
  workflow_dispatch: {}

env:
  BIN: cmd

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get next version
        id: tag
        run: |
          # get the last tag or use v0.0.0 if no tags exist
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"

          # extract version number and increment patch version
          VERSION=$(echo $LAST_TAG | sed 's/v//')
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          # increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"

          echo "New tag: $NEW_TAG"
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Setup Rust for version update
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Update Cargo.toml version
        run: |
          cd cmd
          # update version in Cargo.toml
          sed -i 's/^version = .*/version = "${{ steps.tag.outputs.version }}"/' Cargo.toml

          # update Cargo.lock with new version
          cargo update || cargo check

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add cmd/Cargo.toml cmd/Cargo.lock
          git commit -m "bump version to ${{ steps.tag.outputs.tag }}" || exit 0
          git tag ${{ steps.tag.outputs.tag }}
          git push origin HEAD --tags

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: CMD Binary ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: false

  build-macos:
    runs-on: macos-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v4

      - name: Create dummy secrets directory
        run: |
          cd cmd
          mkdir -p secrets

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            cmd/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('cmd/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin

      - name: Build
        run: |
          cd cmd
          cargo build --release --target aarch64-apple-darwin

      - name: Package
        run: |
          cd cmd
          tar -czvf ${{ env.BIN }}-macos-arm64.tar.gz -C target/aarch64-apple-darwin/release ${{ env.BIN }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: cmd/${{ env.BIN }}-macos-arm64.tar.gz
          asset_name: ${{ env.BIN }}-${{ needs.create-release.outputs.tag }}-macos-arm64.tar.gz
          asset_content_type: application/gzip

  build-linux:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v4

      - name: Create dummy secrets directory
        run: |
          cd cmd
          mkdir -p secrets

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            cmd/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('cmd/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl

      - name: Configure APT to use runner‚Äêwritable archives only
        run: |
          sudo mkdir -p /home/runner/apt-cache/{archives,partial}
          echo 'Dir::Cache::archives "/home/runner/apt-cache/archives";' \
            | sudo tee /etc/apt/apt.conf.d/99runner-cache

      - name: Cache APT archives
        uses: actions/cache@v4
        with:
          path: /home/runner/apt-cache/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/release-cmd.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install musl tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Prune default APT cache
        run: sudo rm -rf /var/cache/apt/archives /var/cache/apt/lists

      - name: Build
        run: |
          cd cmd
          cargo build --release --target x86_64-unknown-linux-musl

      - name: Package
        run: |
          cd cmd
          tar -czvf ${{ env.BIN }}-linux-musl.tar.gz -C target/x86_64-unknown-linux-musl/release ${{ env.BIN }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: cmd/${{ env.BIN }}-linux-musl.tar.gz
          asset_name: ${{ env.BIN }}-${{ needs.create-release.outputs.tag }}-linux-musl.tar.gz
          asset_content_type: application/gzip
